function getFollowersBtn(){let F;if(F=document.getElementsByClassName('_alvs')[0]) return F;console.error("S1 (fatal): could not find 'followers' button.");return 0;}function getFollowingBtn(){let F;if(F=document.getElementsByClassName('_alvs')[1]) return F;console.error("S1 (fatal): could not find 'following' button.");return 0;}function getFollowers(F1){if(F1.getElementsByClassName('_ac2a')[0]){const n_followers = parseInt(F1.getElementsByClassName('_ac2a')[0].title.replace(',',''));console.log('followers = ',n_followers);return n_followers;}console.error("S1 (fatal): could not get follower number.");return 0;}function getFollowing(F2){if(F2.getElementsByTagName('span')[0]){const n_following = parseInt(F2.getElementsByTagName('span')[0].innerText.replace(',',''));console.log('following = ',n_following);return n_following;}console.error("S1 (fatal): could not get following number.");return 0;}function getUserID(current=false){const htmlContent = document.documentElement.innerHTML;const word = current ? 'profile_id' : 'appScopedIdentity';const index = htmlContent.indexOf(word);if (index !== -1) {const len = current ? ('profile_id'.length+3) : ('appScopedIdentity'.length+3);const fin = current ? 14 : 11;const extractedString = htmlContent.substr(index + len, fin);console.log('got user ID:', parseInt(extractedString));return extractedString;} else {console.error('user id not found');return 0;}}function get_non_followers(){let userId;if(!(userId = getUserID())) return;let F1, F2, n_followers, n_following;if(!(F1 = getFollowersBtn())) return;if(!(F2 = getFollowingBtn())) return;if(!(n_followers = getFollowers(F1))) return;if(!(n_following = getFollowing(F2))) return;const random_wait_time = (waitTime = 300) => new Promise((resolve, reject) => {setTimeout(() => {return resolve();}, Math.random() * waitTime);});const fetch_query_hash = async(userId, limit, hash, is_followers) => {const q = `https://www.instagram.com/graphql/query/?query_hash=${hash}&variables={"id":"${userId}","include_reel":true,"fetch_mutual":true,"first":20`;let userFollowers = [], actuallyFetched = 20, url = `${q}}`;while (limit > 0) {const followersResponse = await fetch(url).then(res => res.json()).then(res => {const nodeIds = [];const list = is_followers ? 'edge_followed_by' : 'edge_follow';for (const node of res.data.user[list].edges) {nodeIds.push(node.node.username);}actuallyFetched = nodeIds.length;if(!is_followers){return {edges: nodeIds,endCursor: res.data.user.edge_follow.page_info.end_cursor};} else {return {edges: nodeIds,endCursor: res.data.user.edge_followed_by.page_info.end_cursor};}}).catch(err => {limit = -1;return {edges: []};});await random_wait_time();userFollowers = [...userFollowers, ...followersResponse.edges];limit -= actuallyFetched;url = `${q},"after":"${followersResponse.endCursor}"}`;}if(is_followers){console.log("followers:",userFollowers);followers_done = true;lF1 = userFollowers;}else{console.log("following:",userFollowers);following_done = true;lF2 = userFollowers;}postFetch();};fetch_query_hash(userId, n_followers, "c76146de99bb02f6415203be841dd25a", true);fetch_query_hash(userId, n_following, "d04b0a864b4b54837c0d870b0e77e076", false);}function postFetch(){if(followers_done && following_done){for(const i of lF2) if(!lF1.includes(i)) lF3.push(i);console.log("non followers:",lF3);}}followers_done = false;following_done = false;lF1=[];lF2=[];lF3=[];get_non_followers();
